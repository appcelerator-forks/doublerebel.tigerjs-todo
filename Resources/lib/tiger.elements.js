// Generated by CoffeeScript 1.3.3
(function() {
  var Element, Elements, Tiger, element, elements, _i, _j, _len, _len1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tiger = this.Tiger || require('tiger');

  Element = Tiger.Element;

  Elements = {};

  elements = ['ActivityIndicator', 'AlertDialog', 'Button', 'EmailDialog', 'ImageView', 'Label', 'OptionDialog', 'ScrollView', 'Slider', 'Switch', 'TableView', 'TableViewRow', 'TableViewSection', 'TextField', 'View', 'WebView', 'Window'];

  for (_i = 0, _len = elements.length; _i < _len; _i++) {
    element = elements[_i];
    Elements[element] = (function(_super) {

      __extends(_Class, _super);

      function _Class() {
        return _Class.__super__.constructor.apply(this, arguments);
      }

      _Class.prototype.elementName = element;

      return _Class;

    })(Element);
  }

  for (_j = 0, _len1 = elements.length; _j < _len1; _j++) {
    element = elements[_j];
    Tiger[element] = Elements[element];
  }

  Tiger.Window.include({
    open: function() {
      return this.element.open();
    },
    close: function() {
      return this.element.close();
    }
  });

  Tiger.TableView.include({
    appendRow: function(el) {
      this.element.appendRow(el.element || el);
      return this;
    },
    setData: function(rows) {
      var nativeRows, row, _k, _len2;
      nativeRows = [];
      for (_k = 0, _len2 = rows.length; _k < _len2; _k++) {
        row = rows[_k];
        nativeRows.push(row.element || row);
      }
      this.element.setData(nativeRows);
      return this;
    }
  });

  Tiger.TableViewRow.extend({
    constructor: function(props) {
      props = Tiger.extend({
        className: 'GUID' + Spine.guid().slice(-12)
      }, props);
      return constructor.__super__.constructor.call(this, props);
    }
  });

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Elements;
  }

}).call(this);

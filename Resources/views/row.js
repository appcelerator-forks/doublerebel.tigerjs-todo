// Generated by CoffeeScript 1.6.2
(function() {
  var Row, Tiger, dip,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tiger = require('/lib/tiger');

  dip = require('/views/widgets').dip;

  Row = (function(_super) {
    __extends(Row, _super);

    Row.prototype.defaults = {
      height: dip(50),
      backgroundColor: '#fff',
      focusable: false,
      color: '#000'
    };

    Row.prototype.doneBackgroundColor = '#eee';

    Row.prototype.doneColor = '#ccc';

    function Row(args) {
      this.check = new Tiger.ImageView({
        image: '/images/tick_gray_64.png',
        left: 0,
        height: dip(50),
        width: dip(50)
      });
      this.task = new Tiger.Label({
        text: args.itemText,
        left: dip(50),
        right: dip(50),
        height: Ti.UI.SIZE,
        font: {
          fontSize: dip(18)
        }
      });
      this.remove = new Tiger.ImageView({
        image: '/images/red_x.png',
        right: 0,
        height: dip(50),
        width: dip(50)
      });
      if (Ti.Platform.osname !== 'android') {
        args.selectionStyle = Ti.UI.iPhone.TableViewCellSelectionStyle.NONE;
      }
      Row.__super__.constructor.call(this, args);
      this.add(this.check).add(this.task).add(this.remove);
    }

    Row.prototype.displayTaskStatus = function(task) {
      if (!task) {
        return;
      }
      if (task.done) {
        this.set({
          backgroundColor: this.doneBackgroundColor
        });
        this.check.set({
          backgroundColor: this.doneBackgroundColor
        });
        this.task.set({
          color: this.doneColor
        });
        return this.check.set({
          image: '/images/tick_64.png'
        });
      } else {
        this.set({
          backgroundColor: this.defaults.backgroundColor
        });
        this.check.set({
          backgroundColor: this.defaults.backgroundColor
        });
        this.task.set({
          color: this.defaults.color
        });
        return this.check.set({
          image: '/images/tick_gray_64.png'
        });
      }
    };

    return Row;

  })(Tiger.TableViewRow);

  module.exports = Row;

}).call(this);

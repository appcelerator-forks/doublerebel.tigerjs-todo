// Generated by CoffeeScript 1.6.2
(function() {
  var App, Elements, Row, Tiger, Widgets, dip,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tiger = require('/lib/tiger');

  Elements = require('/lib/tiger.elements');

  Widgets = require('/views/widgets');

  Row = require('/controllers/row');

  dip = Widgets.dip;

  App = (function(_super) {
    __extends(App, _super);

    App.prototype.defaults = {
      fullscreen: false,
      navBarHidden: true,
      exitOnClose: true
    };

    App.prototype.createMenu = function() {
      this.menu = new Tiger.View({
        layout: 'horizontal',
        bottom: 0,
        height: dip(46),
        width: Ti.UI.FILL,
        backgroundGradient: {
          type: "linear",
          startPoint: {
            x: "0%",
            y: "0%"
          },
          endPoint: {
            x: "0%",
            y: "100%"
          },
          colors: [
            {
              color: "#a00",
              offset: 0.0
            }, {
              color: "#400",
              offset: 1.0
            }
          ]
        }
      });
      this.allButton = new Tiger.Button({
        title: 'All'
      });
      this.activeButton = new Tiger.Button({
        title: 'Active'
      });
      this.doneButton = new Tiger.Button({
        title: 'Done'
      });
      return this.menu.add(this.allButton).add(this.activeButton).add(this.doneButton);
    };

    function App() {
      this.header = new Widgets.Header;
      this.header.title.set({
        text: 'TigerJS Todo'
      });
      this.todoTable = new Tiger.TableView({
        top: dip(50),
        bottom: dip(46)
      });
      this.createMenu();
      App.__super__.constructor.apply(this, arguments);
      this.add(this.header).add(this.todoTable).add(this.menu);
    }

    App.prototype.renderTasks = function(tasks) {
      var row, rows, task, _i, _len;

      rows = [];
      for (_i = 0, _len = tasks.length; _i < _len; _i++) {
        task = tasks[_i];
        row = new Row(task.id);
        rows.push(row.view.element);
      }
      return this.todoTable.set({
        data: rows
      });
    };

    return App;

  })(Tiger.Window);

  module.exports = App;

}).call(this);
